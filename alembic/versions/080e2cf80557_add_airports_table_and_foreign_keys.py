"""add_airports_table_and_foreign_keys

Revision ID: 080e2cf80557
Revises: c3449aa5cb5b
Create Date: 2025-08-28 08:57:21.591646

"""
from datetime import datetime

from typing import Sequence, Union

from api.flights.models import airports

from alembic import op
import sqlalchemy as sa



# revision identifiers, used by Alembic.
revision: str = '080e2cf80557'
down_revision: Union[str, Sequence[str], None] = 'c3449aa5cb5b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Buat table airports terlebih dahulu
    op.create_table('airports',
        sa.Column('code', sa.String(length=3), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('city', sa.String(length=50), nullable=False),
        sa.Column('country', sa.String(length=50), nullable=False),
        sa.Column('timezone', sa.String(length=50), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('code')
    )

    current_time = datetime.now()
    
    # Step 2: Insert data bandara-bandara umum
    # airports_table = sa.table('airports',
    #     sa.column('code', sa.String),
    #     sa.column('name', sa.String),
    #     sa.column('city', sa.String),
    #     sa.column('country', sa.String),
    #     sa.column('timezone', sa.String),
    #     sa.column('created_at', sa.DateTime),
    #     sa.column('updated_at', sa.DateTime)
    # )
    
    # Data bandara umum di Asia Tenggara
    common_airports = [
        {
            'code': 'CGK', 'name': 'Soekarno-Hatta International Airport',
            'city': 'Jakarta', 'country': 'Indonesia', 'timezone': 'Asia/Jakarta',
            'created_at': current_time, 'updated_at': current_time
        },
        {
            'code': 'DPS', 'name': 'Ngurah Rai International Airport',
            'city': 'Denpasar', 'country': 'Indonesia', 'timezone': 'Asia/Makassar',
            'created_at': current_time, 'updated_at': current_time
        },
        {
            'code': 'SUB', 'name': 'Juanda International Airport',
            'city': 'Surabaya', 'country': 'Indonesia', 'timezone': 'Asia/Jakarta',
            'created_at': current_time, 'updated_at': current_time
        },
        {
            'code': 'SIN', 'name': 'Changi Airport',
            'city': 'Singapore', 'country': 'Singapore', 'timezone': 'Asia/Singapore',
            'created_at': current_time, 'updated_at': current_time
        },
        {
            'code': 'KUL', 'name': 'Kuala Lumpur International Airport',
            'city': 'Kuala Lumpur', 'country': 'Malaysia', 'timezone': 'Asia/Kuala_Lumpur',
            'created_at': current_time, 'updated_at': current_time
        },
        {
            'code': 'BKK', 'name': 'Suvarnabhumi Airport',
            'city': 'Bangkok', 'country': 'Thailand', 'timezone': 'Asia/Bangkok',
            'created_at': current_time, 'updated_at': current_time
        }
    ]
    
    op.bulk_insert(airports, common_airports)
    
    # Step 3: Tambahkan kolom origin_code dan destination_code sebagai foreign keys
    # op.add_column('flight_prices', sa.Column('origin_code', sa.String(length=3), nullable=True))
    # op.add_column('flight_prices', sa.Column('destination_code', sa.String(length=3), nullable=True))
    
    # # Step 4: Update data existing di flight_prices
    # flight_prices_table = sa.table('flight_prices',
    #     sa.column('flight_number', sa.String),
    #     sa.column('origin', sa.String),
    #     sa.column('destination', sa.String)
    # )
    
    # # Mapping flight_number ke airport codes
    # flight_mapping = {
    #     'GA123': ('CGK', 'DPS'),  # Jakarta to Denpasar
    #     'SQ456': ('SIN', 'CGK'),  # Singapore to Jakarta
    #     'AK789': ('KUL', 'CGK'),  # Kuala Lumpur to Jakarta
    # }
    
    # for flight_num, (origin, dest) in flight_mapping.items():
    #     op.execute(
    #         flight_prices_table.update()
    #         .where(flight_prices_table.c.flight_number == flight_num)
    #         .values(origin_code=origin, destination_code=dest)
    #     )
    
    # # Step 5: Set default untuk data yang belum terisi
    # op.execute(
    #     flight_prices_table.update()
    #     .where(flight_prices_table.c.origin_code.is_(None))
    #     .values(origin_code='CGK', destination_code='DPS')
    # )
    
    # Step 6: Buat foreign key constraints
    op.create_foreign_key(
        'fk_flight_prices_origin_code',
        'flight_prices', 'airports',
        ['origin_code'], ['code']
    )
    op.create_foreign_key(
        'fk_flight_prices_destination_code',
        'flight_prices', 'airports',
        ['destination_code'], ['code']
    )
    
    # Step 7: Ubah menjadi NOT NULL setelah semua data terisi
    op.alter_column('flight_prices', 'origin_code', nullable=False)
    op.alter_column('flight_prices', 'destination_code', nullable=False)
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Hapus foreign key constraints terlebih dahulu
    op.drop_constraint('fk_flight_prices_destination_code', 'flight_prices', type_='foreignkey')
    op.drop_constraint('fk_flight_prices_origin_code', 'flight_prices', type_='foreignkey')
    
    # Hapus kolom
    op.drop_column('flight_prices', 'destination_code')
    op.drop_column('flight_prices', 'origin_code')
    
    # Hapus table airports
    op.drop_table('airports')
    
    # ### end Alembic commands ###
